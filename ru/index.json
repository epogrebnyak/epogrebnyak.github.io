[{"authors":["admin"],"categories":null,"content":"Весь сайт в начальной стадии наполнения, буквально один-два поста.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"ru","lastmod":-62135596800,"objectID":"598b63dd58b43bce02403646f240cd3c","permalink":"https://epogrebnyak.github.io/ru/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ru/authors/admin/","section":"author","summary":"Весь сайт в начальной стадии наполнения, буквально один-два поста.","tags":null,"title":"Евгений Погребняк","type":"author"},{"authors":null,"categories":["programming"],"content":" \nC чего начать? Конечно с постановки целей, но если надо сразу в бой - то learn-python О.Твердохлеба1. Лучше всего подойдет тем, кто когда-то начинал программировать (например, Basic, Pascal или VBA) и хочет восстановить навыки.\nХорошие введения есть в лекциях QuantEcon и в лекциях SciPy, но все материалы на английском.\nЕсли нужна именно книга, то очень живая деятельность идет вокруг The Hitchhiker’s Guide to Python, которая довольно быстро переходит к описанию приложений и библиотек.\nЧасто раньше рекомендовали:\n Zed Shaw. Learn Python the Hard Way Mark Pilgrim. Dive into Python.  Learn Python the Hard Way активно обновляется, Dive into Python застыл на версии 2011 года. Учить язык по ним бы не стал, но как сборник упражнений - отличный вариант.\nПлан изучения Я выписал шаги между самым первым запуском интерпретатора и далекими, непонятными, темными сторонами языка, которые выявляются после длительного изучения.\n1. Где живет программа    \u0026nbsp; Установить Python     Идея python.exe это исполняемый файл где-то в файловой системе. Он запускается с аргументами и опциями.   1 строка python --version   Сложности Переменная PATH, конфликты версий   Откуда\u0026hellip; \u0026hellip; установаить Python? Anaconda       \u0026nbsp; REPL     Идея Программа это текстовый файл, интепретатор это цикл.   1 строка print ('Hello, world!'), python -c \u0026quot;print('Hello, world!')\u0026quot;   Сложности Принять, что IDE - это не сам Python.    2. Основная часть синтаксиса и логики языка Выражения и операторы. Переменные.  Интерпретатор может поработать калькулятором.\n \u0026gt;\u0026gt; 1 + 3 * (10 - 2) 25  Типы и структуры данных.  Числа и строки разные вещи.\n \u0026gt;\u0026gt; isinstance(\u0026quot;abc\u0026quot;, str) \u0026amp; isinstance(1, int) True   Списки и словари (containers) полезны .\n \u0026gt;\u0026gt; colors = ['red', 'blue', 'green', 'black', 'white'] \u0026gt;\u0026gt; colors[0] \u0026quot;red\u0026quot;  \u0026gt;\u0026gt; {1:\u0026quot;I\u0026quot;, 2:\u0026quot;II\u0026quot;, 3:\u0026quot;III\u0026quot;, 4:\u0026quot;IV\u0026quot;, 5:\u0026quot;V\u0026quot;}[4] \u0026quot;IV\u0026quot;  Функции. Стандартная библиотека.  Вычисления и операции можно сгруппировать.\n \u0026gt;\u0026gt; min(5, 7) 5  import math def roots(a, b, c): \u0026quot;\u0026quot;\u0026quot;Return a tuple with quadratic equation roots.\u0026quot;\u0026quot;\u0026quot; d = b**2-4*a*c try: r = math.sqrt(d) / (2 * a) except ValueError: raise ValueError(\u0026quot;Cannot calculate real roots\u0026quot;) x0 = - b / (2 * a) return x0 - r, x0 + r  Условное исполнение if-then-else. Цикл for.  Исполнение программы может куда-то перескаивать.\n for x in [1,2,3,4]: if (x % 2) == 0: print(x, \u0026quot;is even.\u0026quot;) else: print(x, \u0026quot;is odd.\u0026quot;)  Все остальное, о чем учат в базовых курсах Пункты выше описывают минимальную версию языка программирования. За бортом остаются:\n различия между скриптами, модулями, пакетами дебаггер, логирование генераторы, итераторы, распаковка (list comprehension) ввод-вывод классы  Тем не менее, повторю еще раз ссылки на базовые курсы, в них все есть:\n trekhleb/learn-python лекции QuantEcon лекции SciPy  \rИдея: сделать таблицу \u0026lt;подтема\u0026gt;-\u0026lt;разделы разных учебников\u0026gt;.\n\r\r3. Дальнейшие важные пункты Ниже чеклист чуть более продвинутых тем, которые так или иначе возникают при изучении и использовании языка.\n Обзор языка:  import keyword; keyword.kwlist топ вопросов в StackOverflow  Среды разработки (IDE):  просто текстовый редактор (vim) IDLE, VSCode, Pycharm Jupyter  Менеджеры пакетов, структура и упаковка проектов:  pip, requiements.txt pipenv conda\n poetry  Аннотирование:\n PEP 257, docstrings autopep8, black sphinx  PEP8, \u0026ldquo;идиоматический\u0026rdquo; питон Регулярные выражения и форматы:  regex101.com pyformat форматы даты и времени  Ввод-вывод (IO):  файлы: pathlib, csv CLI: sys.args, docopt\n  Databases, SQL:  dataset  Web:  requests flask  Тесты и TDD:  assert, unittest, pytest dependency injection continious integration (CI)  Объектно-ориентированное программирование (ООП):  \u0026ldquo;Everything is an object\u0026rdquo;, id() cat vs dog tutorial dir() ABCs.  Алгоритмы:  сортировки O-notation  Design patterns Productivity:  command line editor shortcuts git markdown  Python моей мечты  отключить динамическую типизацию оператор . для склеивания функций   Буду признателен, если расскажете, какие вехи были у вас в изучении python (или других областей программирования) - как кратко охаратеризовать этот этап и что за ним стоит, что было или остается сложным, возможно - ссылки по теме.\nПедагогика какая-то в этом есть? Мне кажется, основная проблема в обучении программированию - не упрощение или переупаковка материала, а поддержание мотивации обучающихся.\nХорошо известно, что обучение лучше идет с конкретными примерами, задачами из сферы знаний пользователя, кейсы и так далее. Проблема с этими материалами - как с курицей и яйцом: пока навыков мало- освоить сложный пример нельзя, а простые примеры редко цепляют подлинный интерес обучающихся.\nВыход из этого круга либо \u0026ldquo;сверху\u0026rdquo; (показать как работает итоговая программа и разобраться в начинке - пример fast.ai), \u0026ldquo;сбоку\u0026rdquo; (программы поменьше и разбор быстрее, Learn Python the Hard Way) или \u0026ldquo;снизу\u0026rdquo; (все-таки запастись терпением на долгую подготовку, Norwig).\nПара ссылок на тему \u0026ldquo;а как учить?\u0026rdquo;:\n Ten quick tips for teaching programming (2018) The Best Way To Learn How To Code (3 правила) П.Норвиг. Научитесь программировать за 10 лет  Учить не Python, а computer science Почти классика:\n http://interactivepython.org/courselib/static/thinkcspy/index.html  Больше хардкора:\n https://teachyourselfcs.com/ https://github.com/ossu/computer-science https://github.com/donnemartin/system-design-primer  А как же Coursera? Почему бы не попробовать, но есть риски:\n \u0026ldquo;Using online tutorials is like trying to learn how to cook by stabbing at random buttons on an unlabeled microwave.\u0026rdquo; A blog in 2012\n\u0026ldquo;Этот datacamp\u0026hellip; Он по-моему ничему вообще не учит.\u0026rdquo; От знакомого, 2019.\n Откуда за мотивация? Github Вкратце ситуацию вокруг topics/python и trending/python можно изложить так:  используем requests/scrapy чтобы загрузить в pandas данные c сайтов на flask/django и поработать с ними в tensorflow/keras на машинах под управлением ansible/docker-compose временами изучая awesome-python/system-design-primer.  Опрос PyCharm Python developers survey 2018 рассказывает о том, что на самом деле пилят питонисты, но опять таки - с их слов.\nbuild-your-own-x Много небольших проектов под Python в build-your-own-x: от интерпретатора Lisp до своей маленькой операционной системы. Основной приницп: пока что-нибудь сам не сломаешь сделаешь - не разберешься.\nПроект Эйлер На проекте Эйлер много математических задач.\n Еще более популярный репозитарий того же автора посвящен машинному обучению\r^   ","date":1552636677,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1552636677,"objectID":"ae7561936e7b209da06a5918fe34fdbe","permalink":"https://epogrebnyak.github.io/ru/post/2019-03-16-start-python/","publishdate":"2019-03-15T10:57:57+03:00","relpermalink":"/ru/post/2019-03-16-start-python/","section":"post","summary":"C чего начать? Конечно с постановки целей, но если надо сразу в бой - то learn-python О.Твердохлеба1. Лучше всего подойдет тем, кто когда-то начинал программировать (например, Basic, Pascal или VBA) и хочет восстановить навыки.\nХорошие введения есть в лекциях QuantEcon и в лекциях SciPy, но все материалы на английском.\nЕсли нужна именно книга, то очень живая деятельность идет вокруг The Hitchhiker’s Guide to Python, которая довольно быстро переходит к описанию приложений и библиотек.","tags":["python","clean code"],"title":"Начать (и успешно продолжить) программировать на Python","type":"post"}]