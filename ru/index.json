[{"authors":["admin"],"categories":null,"content":"Весь сайт в начальной стадии наполнения, буквально один-два поста.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"ru","lastmod":-62135596800,"objectID":"598b63dd58b43bce02403646f240cd3c","permalink":"https://epogrebnyak.github.io/ru/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ru/authors/admin/","section":"author","summary":"Весь сайт в начальной стадии наполнения, буквально один-два поста.","tags":null,"title":"Евгений Погребняк","type":"author"},{"authors":null,"categories":["programming"],"content":" C чего начать? Если нужен короткий ответ - learn-python О.Твердохлеба. Лучше всего подойдет тем, кто когда-то начинал программировать (например, Basic, Pascal или VBA) и хочет восстановить и развить навыки.\nТакже хорошие введения есть на сайте QuantEcon (эта часть именно про Python, легко доступна для неэкономистов) и в лекциях по SciPy. Обе главы написаны очень хорошо, но все материалы на английском.\nПродублирую еще раз списком:\n trekhleb/learn-python - все, что надо знать о синтаксисе языка удобно сгруппировано и проиллюстрировано примерами QuantEcon - начальная глава более сложного учебника. лекция из SciPy - аналогично, начальная глава более полного курса  Есть нужна именно книга, то очень живым проектом выглядит The Hitchhiker’s Guide to Python, рекомендуется, выложена в сети. Сильная сторна - сразу переходят к приложениям и библиотекам, но это и требует подготовки читателя.\nТакже раньше часто рекомендовали Zed Shaw. Learn Python the Hard Way и Mark Pilgrim. Dive into Python, они доступны онлайн. Learn Python the Hard Way активно обновляется, Dive into Python застыл на версии 2011 года. Учить язык по ним бы не стал, но как сборник упражений - отличный вариант.\nПлан изучения Я выписал шаги между самым первым запуском интерпретатора и далекими, непонятными, темными сторонами языка, которые выявляются после длительного изучения:\n1. Где живет программа.    \u0026nbsp; Установить Python     Идея python.exe это исполняемый файл где-то в файловой системе Он запускается с аргументами и опциями.   1 строка python --version   Сложности Переменная PATH, конфликты версий   Откуда\u0026hellip; \u0026hellip; установаить? https://www.anaconda.com/distribution       \u0026nbsp; REPL     Идея Программа это текстовый файл, интепретатор это цикл.   1 строка print ('Hello, world!'), python -c \u0026quot;print('Hello, world!')\u0026quot;   Сложности IDE - это не сам Python.    2. Основная часть синтаксиса и логики языка. 2.1. Выражения и операторы. Переменные.  Интерпретатор может поработать калькулятором.\n \u0026gt;\u0026gt; 1 + 3 * (10 - 2) 25  2.2. Типы и структуры данных.  Числа и строки разные вещи.\n \u0026gt;\u0026gt; isinstance(\u0026quot;abc\u0026quot;, str) \u0026amp; isinstance(1, int) True   Списки и словари (containers) полезны .\n \u0026gt;\u0026gt; colors = ['red', 'blue', 'green', 'black', 'white'] \u0026gt;\u0026gt; colors[0] \u0026quot;red\u0026quot;  \u0026gt;\u0026gt; {1:\u0026quot;I\u0026quot;, 2:\u0026quot;II\u0026quot;, 3:\u0026quot;III\u0026quot;, 4:\u0026quot;IV\u0026quot;, 5:\u0026quot;V\u0026quot;}[4] \u0026quot;IV\u0026quot;  2.3. Функции. Стандартная библиотека.  Вычисления и операции можно сгруппировать.\n import math def roots(a, b, c): \u0026quot;\u0026quot;\u0026quot;Quadratic equation roots.\u0026quot;\u0026quot;\u0026quot; d = b**2-4*a*c try: r = math.sqrt(d) except ValueError: raise ValueError(\u0026quot;Cannot calculate real roots\u0026quot;) x1 = (-b + r) / (2 * a) x2 = (-b - r) / (2 * a) return x1, x2  \u0026gt;\u0026gt; min (5, 7) 5  2.4. Условное исполнение if-then-else. Цикл for.  Исполнение программы может куда-то перескаивать.\n for x in [1,2,3,4]: if (x % 2) == 0: print(x, \u0026quot;is even.\u0026quot;) else: s = \u0026quot;odd\u0026quot; print(x, \u0026quot;is odd.\u0026quot;)  2.5. Все остальное, а чем учат в базовых курсах. В этом месте наметился перелом данной статьи. Оказалось, что в пп. 2.1.-2.3 сложно описать минимальную версию языка программирования. За бортом остаются:\n скрипты, модули, пакеты дебаггер, логирование генераторы, итераторы, распаковка (list comprehension) ввод-вывод классы много что другого  Тем не менее, повторю еще раз ссылки на базовые курсы:\n trekhleb/learn-python лекции QuantEcon лекции SciPy  В них все есть! (Идея: генерировать таблицу \u0026lt;подтема\u0026gt;-\u0026lt;разделы разных учебников\u0026gt;).\n3. Дальнейшие важные пункты Ниже чеклист продвинутых тем, которые так или иначе возникают при изучении и использовании языка.\n Обзор языка:\n import keyword; keyword.kwlist StackOverflow.  Среды разработки (IDE):\n просто текстовый редактор (vim) IDLE, VSCode, Pycharm Jupyter  Менеджеры пакетов, структура и упаковка проектов:\n pip, requiements.txt pipenv, pipfile conda\n poetry   Аннотирование:\n docstrings и PEP8 autopep8, black sphinx  \u0026ldquo;Идиоматический\u0026rdquo; питон\n Регулярные выражения и форматы.\n regex101.com pyformat форматы даты и времени  Ввыод-вывод (IO):\n files: pathlib, csv CLI: sys.args, docopt\n  Databases, SQL:\n dataset  Web:\n requests flask  Тесты и TDD:\n assert, unittest, pytest dependency injection continious inegration   Объектно-ориентированное программирование (ООП):\n \u0026ldquo;Everything is an object\u0026rdquo;, id() class, cat vs dog dir() ABCs.  Алгоритмы:\n сортировки O-notation  Design patterns\n Productivity:\n command line editor shortcuts git markdown   Вне описания: - pandas - matplotlib - сравнение python с R и другими языками - type hints\nБуду признателен, если расскажете, какие вехи были у вас в изучении python (или других областей программирования) - как кратко очаратеризовать этот этап и что за ним стоит, что было или остается сложным, возможно - ссылки по теме.\nПедагогика какая-то в этом есть? Мне кажется, основная проблема в обучении программированию - не упрощение или переупаковка материала, а поддержание мотивации обучающихся.\nХорошо известно, что идеально обучение с конкретными примерами, задачами близкими к сфере знаний пользователя, кейсы и так далее. Проблема с этими материалами - как с курицей и яйцом: пока навыков мало освоить сложный пример нельзя, а простые примеры редко цепляют подлинный интерес и поддерживают мотивацию (тут хочется ошибаться).\nВыход из этого круга либо \u0026ldquo;сверху\u0026rdquo; (показать как работает итоговая программа и разобраться в начинке - пример fast.ai), \u0026ldquo;сбоку\u0026rdquo; (программы поменьше и разбор быстрее, Learn Python the Hard Way) или \u0026ldquo;снизу\u0026rdquo; (все-таки запастись терпением на долгую подготовку, Norwig).\nПара ссылок на тему \u0026ldquo;а как учить?\u0026rdquo;:\n Ten quick tips for teaching programming (2018) The Best Way To Learn How To Code (3 правила) П.Норвиг. Научитесь программировать за 10 лет Требования к языку программирования и среде обучения  Учить не Python, а computer science Почти классика:\n http://interactivepython.org/courselib/static/thinkcspy/index.html  Больше хардкора:\n https://teachyourselfcs.com/ https://github.com/ossu/computer-science https://github.com/donnemartin/system-design-primer  А как же Courser\u0026rsquo;a Почему бы не попробовать, но есть риски:\n \u0026ldquo;Using online tutorials is like trying to learn how to cook by stabbing at random buttons on an unlabeled microwave.\u0026rdquo; A blog in 2012\n\u0026ldquo;Этот datacamp\u0026hellip; Он по-моему ничему вообще не учит.\u0026rdquo; От знакомого, 2019.\n Куда за мотивацией?  Github покажет какие проекты активно развиваются:   topics/python - популярные за все время trending/python - последние тренды  Вкратце ситуацию можно изложить так:\n используем requests/scrapy чтобы загрузить в pandas данные c сайтов на flask/django и поработать с ними в tensorflow/keras на машинах под управлением ansible/docker-compose временами изучая awesome-python/system-design-primer.  Со звездами Github есть проблема в том, что базовые инфраструктурные библиотеки (например, проекты NumFOCUS) не получают так уж много звезд, потому что все считают из за данность.\n Python developers survey 2018 рассказывает о том, что на самом деле пилят питонисты, но опять таки - с их слов.\n Много небольших проектов под Python в build-your-own-x: от блокчейна до инетпретатора Lisp до своей маленькой операционной системы. Пока что-нибудь сам не сломаешь сделаешь - не разберешься.\n На проекте Эйлер много математических задач.\n  ","date":1552636677,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1552636677,"objectID":"ae7561936e7b209da06a5918fe34fdbe","permalink":"https://epogrebnyak.github.io/ru/post/2019-03-16-start-python/","publishdate":"2019-03-15T10:57:57+03:00","relpermalink":"/ru/post/2019-03-16-start-python/","section":"post","summary":"C чего начать? Если нужен короткий ответ - learn-python О.Твердохлеба. Лучше всего подойдет тем, кто когда-то начинал программировать (например, Basic, Pascal или VBA) и хочет восстановить и развить навыки.\nТакже хорошие введения есть на сайте QuantEcon (эта часть именно про Python, легко доступна для неэкономистов) и в лекциях по SciPy. Обе главы написаны очень хорошо, но все материалы на английском.\nПродублирую еще раз списком:\n trekhleb/learn-python - все, что надо знать о синтаксисе языка удобно сгруппировано и проиллюстрировано примерами QuantEcon - начальная глава более сложного учебника.","tags":["python","clean code"],"title":"Начать (и успешно продолжить) программировать на Python","type":"post"}]