[{"authors":["admin"],"categories":null,"content":"Весь сайт в начальной стадии наполнения, буквально один-два поста.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"ru","lastmod":-62135596800,"objectID":"598b63dd58b43bce02403646f240cd3c","permalink":"https://epogrebnyak.github.io/ru/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ru/authors/admin/","section":"author","summary":"Весь сайт в начальной стадии наполнения, буквально один-два поста.","tags":null,"title":"Евгений Погребняк","type":"author"},{"authors":null,"categories":["programming"],"content":" C чего начать? Если нужен короткий ответ - всегда рекомендую learn-python О.Твердохлеба. Лучше всего подойдет тем, кто когда-то начинал программировать (Basic, Pascal, VBA) и хочет восстановить навык.\nТакже хорошие введения есть на сайте QuantEcon (эта часть именно про Python, легко доступна для неэкономистов) и в лекциях по SciPy. Обе главы написаны очень хорошо, QuantEcon более лаконичен, SciPy детальнее. Все материалы на английском.\nПродублирую еще раз списком:\n trekhleb/learn-python - все, что надо знать о синтаксисе языка удобно сгруппировано и проиллюстрировано примерами QuantEcon - начальная глава более сложного учебника лекция из SciPy - аналогично, начальная глава более полного курса  Для более подробного погружения я собрал ссылки на best practices, книги и некоторые видео.\nПлан изучения Я выписал шаги между самым первым запуском интерпретатора и далекими, непонятными, темными сторонами языка, которые выявляются после длительного изучения:\n1. Где живет программа    \u0026nbsp; Установить Python     Идея python.exe это исполняемый файл где-то в файловой системе Он запускается с аргументами и опциями.   1 строка python --version   Сложности Переменная PATH, конфликты версий       \u0026nbsp; REPL     Идея Программа это текстовый файл, интепретатор это цикл.   1 строка print ('Hello, world!'), python -c \u0026quot;print('Hello, world!')\u0026quot;   Сложности Выбор IDE. IDE - это не сам Python.    2. Основная часть синтаксиса и логики языка. Выражения и операторы. Переменные.  Интерпретатор может поработать калькулятором.\n \u0026gt;\u0026gt; 1 + 3 * (10 - 2) 25  Типы и структуры данных.  Числа и строки разные вещи.\n \u0026gt;\u0026gt; isinstance(\u0026quot;abc\u0026quot;, str) \u0026amp; isinstance(1, int) True   Списки и словари (containers) полезны .\n \u0026gt;\u0026gt; colors = ['red', 'blue', 'green', 'black', 'white'] \u0026gt;\u0026gt; colors[0] \u0026quot;red\u0026quot;  \u0026gt;\u0026gt; {1:\u0026quot;I\u0026quot;, 2:\u0026quot;II\u0026quot;, 3:\u0026quot;III\u0026quot;, 4:\u0026quot;IV\u0026quot;, 5:\u0026quot;V\u0026quot;}[4] \u0026quot;IV\u0026quot;  Функции. Стандартная библиотека.  Вычисления можно сгруппировать.\n def add(a, b): return a + b  Условное исполнение if-then-else. Цикл for.  Исполнение программы может куда-то перескаивать.\n for x in [1,2,3,4]: if (x % 2) == 0: print(x, \u0026quot;is even.\u0026quot;) else: s = \u0026quot;odd\u0026quot; print(x, \u0026quot;is odd.\u0026quot;)  3. Другие важные пункты.  import keyword; keyword.kwlist StackOverflow.\n PEP8 (autopep, black), docstrings, sphinx.\n IO (file): pathlib, csv. IO (CLI): docopt.\n Databases, SQL: dataset.\n requests, flask.\n Тесты и TDD: assert, unittest, pytest. Dependency injection.\n OOP: id(), dir(), ABCs.\n Алгоритмы и O-notation.\n Design patterns.\n IDEs (IDLE, VSCode, Pycharm) and Jupyter.\n Productivity: command line, git, CI.\n  Буду признателен, если расскажете, какие вехи были у вас в изучении python (или других областей программирования) - как кратко назвать этот этап и что за ним стоит, что было или остается сложным, возможно - ссылки по теме.\nПедагогика какая-то в этом есть? Мне кажется, основная проблема в обучении программированию - не упрощение или переупаковка материала, а поддержание мотивации обучающихся.\nХорошо известно, что идеально обучение с конкретными примерами, задачами близкими к сфере знаний пользователя, кейсы и так далее. Проблема с этими материалами - как с курицей и яйцом: пока навыков мало освоить сложный пример нельзя, а простые примеры редко цепляют подлинный интерес и поддерживают мотивацию (тут хочется ошибаться).\nВыход из этого круга либо \u0026ldquo;сверху\u0026rdquo; (показать как работает итоговая программа и разобраться в начинке - пример fast.ai), \u0026ldquo;сбоку\u0026rdquo; (программы поменьше и разбор быстрее, Learn Python the Hard Way) или \u0026ldquo;снизу\u0026rdquo; (все-таки запастись терпением на долгую подготовку, Norwig).\nПара ссылок на тему \u0026ldquo;а как учить?\u0026rdquo;:\n Ten quick tips for teaching programming (2018) The Best Way To Learn How To Code (3 правила) П.Норвиг. Научитесь программировать за 10 лет Требования к языку программирования и среде обучения  Не Python, а computer science Почти классика:\n http://interactivepython.org/courselib/static/thinkcspy/index.html  Больше хардкора:\n https://teachyourselfcs.com/ https://github.com/ossu/computer-science https://github.com/donnemartin/system-design-primer  А как же Courser\u0026rsquo;a Почему бы не попробовать, но есть риски:\n Using online tutorials is like trying to learn how to cook by stabbing at random buttons on an unlabeled microwave. A blog in 2012\nЭтот datacamp\u0026hellip; Он по-моему ничему вообще не учит. (От знакомого, 2019).\n Куда за мотивацией? Github:\n topics/python trending/python  Python developers survey 2018:\n https://www.jetbrains.com/research/python-developers-survey-2018  ","date":1552636677,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1552636677,"objectID":"ae7561936e7b209da06a5918fe34fdbe","permalink":"https://epogrebnyak.github.io/ru/post/2019-03-16-start-python/","publishdate":"2019-03-15T10:57:57+03:00","relpermalink":"/ru/post/2019-03-16-start-python/","section":"post","summary":"C чего начать? Если нужен короткий ответ - всегда рекомендую learn-python О.Твердохлеба. Лучше всего подойдет тем, кто когда-то начинал программировать (Basic, Pascal, VBA) и хочет восстановить навык.\nТакже хорошие введения есть на сайте QuantEcon (эта часть именно про Python, легко доступна для неэкономистов) и в лекциях по SciPy. Обе главы написаны очень хорошо, QuantEcon более лаконичен, SciPy детальнее. Все материалы на английском.\nПродублирую еще раз списком:\n trekhleb/learn-python - все, что надо знать о синтаксисе языка удобно сгруппировано и проиллюстрировано примерами QuantEcon - начальная глава более сложного учебника лекция из SciPy - аналогично, начальная глава более полного курса  Для более подробного погружения я собрал ссылки на best practices, книги и некоторые видео.","tags":["python","clean code"],"title":"Начать (и успешно продолжить) программировать на Python","type":"post"}]